from tkinter import*
import math


root = Tk()
root.title('Pfaffulator')  #creates the main window
root.resizable(width=False, height=False)
root.geometry('416x550+500+40')

calc= Frame(root, bd=20, pady= 5, bg= 'black', relief=RIDGE)
calc.grid()                                 #creates a frame, calc, in the main window

class Calc():                               #creates calculator and initializes attributes
    def __init__(self):
        self.total = 0
        self.current = ''
        self.input_value = True
        self.check_sum = False
        self.op = ''
        self.result = False

    def numberEnter(self, num):                  #handles user input of numbers
        self.result = False                 #when a new number is entered, set to False
        firstnum = txtDisplay.get()
        secondnum = str(num)
        if self.input_value:
            self.current = secondnum
            self.input_value = False
        else:
            if secondnum == '.':
                if secondnum in firstnum:
                    return
            if secondnum == '0' and firstnum == '0':
                return
            self.current = (str(firstnum) + secondnum)

        self.display(self.current)         #update calculator dispay

    def sum_of_total(self):
        self.result = True
        self.current = float(self.current)
        if self.check_sum == True:
            self.valid_function()
        else:
            self.total = float(txtDisplay.get())

    def valid_function(self):
        self.current = float(self.current)
        self.total = float(self.total)
        if self.op == 'add':
            self.total += self.current
        elif self.op == 'sub':
            self.total -= self.current
        elif self.op == 'multi':
            self.total *= self.current
        elif self.op == 'divide':
            self.total /= self.current
        self.input_value = True
        self.check_sum = False
        self.display(self.total)


    def display(self, value):               #updates display with given value
        txtDisplay.delete(0, END)
        txtDisplay.insert(0, value)

    def operation(self, op):
        if self.check_sum == True:
            self.valid_function()
        elif not self.result:
            self.total = self.current
            self.input_value = True
        self.check_sum = True
        self.op = op
        self.result = False

    def clear_entry(self):
        self.result = False
        self.current = '0'
        self.display(0)
        self.input_value = True

    def all_clear_entry(self):
        self.clear_entry()
        self.total = 0

    def delete(self):
        num_len= len(txtDisplay.get())
        txtDisplay.delete(num_len - 1, 'end')
        if num_len == 1:
            txtDisplay.insert(0, '0')

    def mathPM(self):
        self.result = False
        self.current = -(float(txtDisplay.get()))
        self.display(self.current)

    def sqrt(self):
        self.result = False
        self.current = math.sqrt(float(txtDisplay.get()))
        self.display(self.current)

    def cos(self):
        self.result = False
        self.current = math.cos(math.radians(float(txtDisplay.get())))
        self.display(self.current)

    def tan(self):
        self.result = False
        self.current = math.tan(math.radians(float(txtDisplay.get())))
        self.display(self.current)

    def sin(self):
        self.result = False
        self.current = math.sin(math.radians(float(txtDisplay.get())))
        self.display(self.current)

    def addDot(self):
        if '.' not in str(self.current):
            self.current+= '.'
            self.display(self.current)


added_value = Calc()

txtDisplay = Entry(calc, font=('arial', 16, 'bold'), bd= 20, width = 28, justify = RIGHT)       #display input and output
txtDisplay.grid(row= 0, columnspan= 4, padx =1)
txtDisplay.insert(0, '0')


number_pad= ('789456123')
i = 0
btn = []
for j in range(3,6):                        #creates 3 rows from index 3 to 5
    for k in range(3):                      #creates 3 columns
        btn.append(Button(calc, width=6, height= 2,font= ('arial', 16, 'bold'), bd=4, text= number_pad[i], bg= 'lightpink'))
        btn[i].grid(row= j, column=k, pady=1)
        btn[i]['command']= lambda num=number_pad[i]: added_value.numberEnter(num)           # takes the corresponding digit from number_pad and calls the number method of the added_value instance, passing digit as an argument
        i+=1
#------------------------------------------------------------------------------------------------------
btnDelete = Button(calc, width=6, height= 2, text = 'DEL', font= ('arial', 16, 'bold'), bd=4, bg= 'pink',
                   command= added_value.delete).grid(row= 1, column= 0, pady =1)

btnClear = Button(calc, width=6, height= 2, text = 'C', font= ('arial', 16, 'bold'), bd=4, bg= 'lightpink',
                  command= added_value.clear_entry).grid(row= 1, column= 1, pady =1)

btnClearAll = Button(calc, width=6, height= 2, text = 'CE', font= ('arial', 16, 'bold'), bd=4, bg= 'lightpink',
                     command= added_value.all_clear_entry).grid(row= 1, column= 2, pady =1)

btnPM = Button(calc, width=6, height= 2, text = chr(177), font= ('arial', 16, 'bold'), bd=4, bg= 'lightpink',
               command= added_value.mathPM).grid(row= 1, column= 3, pady =1)

#-------------------------------------------------------------------------------------------------------

btnSQ = Button(calc, width=6, height= 2, text = 'âˆš', font= ('arial', 16, 'bold'), bd=4, bg= 'lightpink',
               command= added_value.sqrt).grid(row= 2, column= 0, pady =1)

btnCos = Button(calc, width=6, height= 2, text = 'Cos', font= ('arial', 16, 'bold'), bd=4, bg= 'lightpink',
                command= added_value.cos).grid(row= 2, column= 1, pady =1)

btnTan = Button(calc, width=6, height= 2, text = 'Tan', font= ('arial', 16, 'bold'), bd=4, bg= 'lightpink',
                command= added_value.tan).grid(row= 2, column= 2, pady =1)

btnSin = Button(calc, width=6, height= 2, text = 'Sin', font= ('arial', 16, 'bold'), bd=4, bg= 'lightpink',
                command= added_value.sin).grid(row= 2, column= 3, pady =1)

#-------------------------------------------------------------------------------------------------------

btnAdd = Button(calc, width=6, height= 2, text = '+', font= ('arial', 16, 'bold'), bd=4, bg= 'lightpink',
                command = lambda: added_value.operation('add')
                ).grid(row= 3, column= 3, pady =1)

btnSub = Button(calc, width=6, height= 2, text = '-', font= ('arial', 16, 'bold'), bd=4, bg= 'lightpink',
                command = lambda: added_value.operation('sub')
                ).grid(row= 4, column= 3, pady =1)

btnMult = Button(calc, width=6, height= 2, text = '*', font= ('arial', 16, 'bold'), bd=4, bg= 'lightpink',
                 command = lambda: added_value.operation('multi')
                 ).grid(row= 5, column= 3, pady =1)

btnDiv = Button(calc, width=6, height= 2, text = '/', font= ('arial', 16, 'bold'), bd=4, bg= 'lightpink',
                command = lambda: added_value.operation('divide')
                ).grid(row= 6, column= 3, pady =1)

#------------------------------------------------------------------------------------------------------

btnZero = Button(calc, width=6, height= 2, text = '0', font= ('arial', 16, 'bold'), bd=4, bg= 'lightpink', command = lambda: added_value.numberEnter(0)
                 ).grid(row= 6, column= 0, pady =1)

btnDot = Button(calc, width=6, height= 2, text = '.', font= ('arial', 16, 'bold'), bd=4, bg= 'lightpink', command = added_value.addDot)
btnDot.grid(row= 6, column= 1, pady =1)

btnEquals = Button(calc, width=6, height= 2, text = '=', font= ('arial', 16, 'bold'), bd=4, bg= 'lightpink', command = added_value.sum_of_total
                ).grid(row= 6, column= 2, pady =1)


root.mainloop()

